# 12. Trouble Shooting

Thread Stack 및 Heap 분석을 통한 문제 해결 접근 방법

서비스 문제 유형
 - Memory leck
 - 잘못 된 로직
 - JVM Bug 등등...

※ 장애 시 Thread Stack 및 Heap  뿐 만 아니라 OS 및 WAS의 상태를 확인하여 장애를 파악

Thread Dump란?

JVM에서 Dump 획득 시 사용하고 있는 Thread call stack 정보

Thread Dump 획득 절차
1. APP 지연 확인
2. 5~10초 간격으로 kill -3 PID 로 3~5번 이상 수행
3. Thread Dump 비교 분석


##Labs12_01 Thread Dump 생성

jboss의 PID 확인
```
[root@localhost bin]# ps -ef | grep jboss

root     18703 18552  0 Jul06 ?        00:05:59 /usr/lib/jvm/java-1.7.0/bin/java -D[Standalone] -XX:+UseCompressedOops 
-server -Xms512m -Xmx2048m -Xss256k -XX:+UseG1GC -XX:MaxGCPauseMillis=1000 -verbose:gc -XX:+PrintGCTimeStamps 
-XX:+PrintGCDetails -XX:+PrintHeapAtGC -Xloggc:/JBOSS/domains/sws1132/log/gclog/gc_20160706_215605.log 
-XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/JBOSS/domains/sws1132/log/gclog/java_pid.hprof 
-XX:+ExplicitGCInvokesConcurrent -Djava.net.preferIPv4Stack=true -Dorg.jboss.resolver.warning=true 
-Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -Djboss.modules.system.pkgs=org.jboss.byteman 
-Djava.awt.headless=true -Djboss.node.name=sws1132 -Djboss.server.base.dir=/JBOSS/domains/sws1132 -Djboss.server.log.dir=/JBOSS/domains/sws1132/log 
-Djboss.socket.binding.port-offset=0 -Djboss.bind.address.management=192.168.102.88 -Djboss.bind.address=192.168.102.88 -Djboss.bind_addr=230.1.0.1 
-Djboss.default.multicast.address=230.1.0.1 -Djboss.default.multicast.port=55200 -Dserver.mode=local -Djboss.default.jgroups.stack=udp -Dorg.jboss.as.logging.per
-deployment=false -Dorg.jboss.boot.log.file=/JBOSS/domains/sws1132/log/server.log -Dlogging.configuration=file:/JBOSS/domains/sws1132/configuration/logging.properties 
-jar /JBOSS/jboss-eap-6.4/jboss-modules.jar -mp /JBOSS/jboss-eap-6.4/modules:/JBOSS/jboss-eap-6.4/modules.ext -jaxpmodule javax.xml.jaxp-provider org.jboss.as.standalone 
-Djboss.home.dir=/JBOSS/jboss-eap-6.4 -Djboss.server.base.dir=/JBOSS/domains/sws1132 -DSERVER=sws1132 -P=/JBOSS/domains/sws1132/bin/env.properties -c standalone-ha.xml
```

5~10초 간격으로 3번 수행
```
[root@localhost bin]# kill -3 18703
[root@localhost bin]# kill -3 18703
[root@localhost bin]# kill -3 18703
```

획득한 Thread Dump는 JBoss 의 nohup log에서 확인 할 수 있다.
```
Full thread dump OpenJDK 64-Bit Server VM (24.65-b04 mixed mode):
"http-/192.168.102.88:8080-1" daemon prio=10 tid=0x00007ff384077000 nid=0x14f in Object.wait() [0x00007ff3a0da3000]
   java.lang.Thread.State: WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <0x000000078b300068> (a org.apache.tomcat.util.net.JIoEndpoint$Worker)
        at java.lang.Object.wait(Object.java:503)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:881)
        - locked <0x000000078b300068> (a org.apache.tomcat.util.net.JIoEndpoint$Worker)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:907)
        at java.lang.Thread.run(Thread.java:745)

```



### CONSOLE
![Lab11](쓰레드.png)


##Labs11_02 DataSource Monitoring

### CLI
```
[standalone@192.168.102.88:9999 /] /subsystem=datasources/data-source=MysqlDS/statistics=pool:read-resource(include-runtime=true)
{
    "outcome" => "success",
    "result" => {
        "ActiveCount" => "20",                  #현재 사용 중인 연결 개수
       ＂AvailableCount＂ => ＂20＂,            #사용 가능한 연결 개수
        "AverageBlockingTime" => "0",           #연결을 위해서 대기했던 평균 시간(ms)
        "AverageCreationTime" => "7",           #데이터베이스와 연결에 걸린 평균 시간(ms)
        ＂CreatedCount＂ => ＂20＂,             #지금까지 만들어진 연결 개수
        "DestroyedCount" => "0",                #지금까지 소멸된 연결 개수
        "InUseCount" => "0",                    #현재 사용중인 연결 개수
        "MaxCreationTime" => "20",              #데이터베이스 연결에 걸린 최대 시간(ms) 
        "MaxUsedCount" => "1",                  #지금까지 동시에 사용된 최대 연결 수 
        "MaxWaitCount" => "0",                  #연결을 얻기 위해 대기한 스레드의 최댓값 
        ＂MaxWaitTime＂ => ＂0＂,               #연결을 얻기 위해 대기한 대기 시간의 최댓값
        "TimedOut" => "0",                      #접속을 얻기 위해 기다리다 타임아웃된 스레드의 개수  
        "TotalBlockingTime" => "0",             #연결을 위해 블록킹했던 시간의 총합
        "TotalCreationTime" => "147",           #연결을 생성하기 위해 걸린 시간의 총합
        "statistics-enabled" => true
    }
}
```
### CONSOLE
![Lab11](데이터 소스.png)


##Labs11_03 Memory Monitoring
### CLI
```
[standalone@192.168.102.88:9999 /] /core-service=platform-mbean/type=memory:read-attribute(name=heap-memory-usage)
{
    "outcome" => "success",
    "result" => {
        "init" => 536870912L,                   #초기 할당 메모리양
        “used” => 179306496L,                   #현재 사용하고 있는 메모리양
        “committed” => 536870912L,              #현재 사용 가능한 메모리양
        ＂max＂ => 2147483648L                  #JVM이 할당 가능한 메모리의 최댓값
    }
}
```
### CONSOLE
![Lab11](memory.png)
